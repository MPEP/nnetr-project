% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnetr.R
\name{newPerceptronModel}
\alias{newPerceptronModel}
\title{Generate perceptron model.}
\usage{
newPerceptronModel(formula, data, learningRate = 1, activation = signum)
}
\arguments{
\item{formula}{formula expression as for regression models, of the form response ~ predictors.}

\item{data}{data frame in which to interpret the variables occurring in formula}

\item{learningRate}{integer value determining the magnitude of the weight updates (default 1)}

\item{activation}{function to control neuron activation (default signum)}
}
\value{
\describe{
\item{w}{vector of best weight values found}
\item{coefficients}{vector of weight values normalized by euclidean distance}
\item{updates}{count of weight updates}
\item{formula}{character representation of formula}
\item{call}{character representation of the call command}
\item{x}{model matrix}
\item{y}{vector of response values}
\item{options}{list of character representation of modelling options}
}
}
\description{
Fit a single-layer perceptron model
}
\details{
This function implements a model for linear classification based on the perceptron model. The level of the response variable must be binary.
}
\note{
The learning algorithm for the perceptron model is only guaranteed to converge for linearly separable input data!
}
\examples{
data(iris)
head(iris, n=20)
irisSub <- iris[1:100, c(1, 3, 5)]
names(irisSub) <- c("sepal", "petal", "species")
head(irisSub)
formula <- formula(species ~ sepal + petal)
p1 <- newPerceptronModel(formula, irisSub)
}
\references{
Cristianini, Nello und John Shawe-Taylor (2000): \emph{An Introduction to Support Vector Machines: And Other Kernel-Based Learning Methods}, Cambridge University Press: Cambridge, England.
}
